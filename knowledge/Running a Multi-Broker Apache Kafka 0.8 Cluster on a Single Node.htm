<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <title>Running a Multi-Broker Apache Kafka 0.8 Cluster on a Single Node</title>
  <meta name="description" content="In this article I describe how to install, configure and run a multi-broker Apache Kafka 0.8 (trunk) cluster on a single machine. The final setup consists of...">

  <link href="https://www.michael-noll.com/favicon.png?v=2" rel="icon">
  <link rel="stylesheet" href="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/main.css">
  <link rel="canonical" href="https://www.michael-noll.com/blog/2013/03/13/running-a-multi-broker-apache-kafka-cluster-on-a-single-node/">
  <link rel="alternate" type="application/rss+xml" title="Michael G. Noll" href="https://www.michael-noll.com/feed.xml">

  <script type="text/javascript" async="" src="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/analytics.js"></script><script src="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/MathJax.js" id=""></script>

  <meta name="twitter:site" content="@miguno">
<meta name="twitter:creator" content="@miguno">
<meta name="twitter:title" content="Running a Multi-Broker Apache Kafka 0.8 Cluster on a Single Node">


<meta name="twitter:description" content="In this article I describe how to install, configure and run a multi-broker Apache Kafka 0.8 (trunk) cluster on a
single machine.  The final setup consists of one local ZooKeeper instance and three...">





  
  <!-- Global site tag (gtag.js) - Google Analytics -->
<script async="" src="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/js"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-548617-1');
</script>

  
<script src="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/embed.js" data-timestamp="1637642222922"></script><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1px; bottom: 2px; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style><link rel="prefetch" as="style" href="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/a_data_002/lounge.css"><link rel="prefetch" as="script" href="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/a_data_002/common.js"><link rel="prefetch" as="script" href="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/a_data_002/lounge.js"><link rel="prefetch" as="script" href="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/a_data_002/config.js"><script async="" id="dsq_recs_scr" src="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/recommendations.js"></script><link rel="prefetch" as="style" href="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/a_data/recommendations.css"><link rel="prefetch" as="script" href="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/a_data/common.js"><link rel="prefetch" as="script" href="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/a_data/recommendations.js"><link rel="prefetch" as="script" href="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/a_data_002/config.js"></head>


  <body><div id="MathJax_Message" style="display: none;"></div>

    <header class="site-header" role="banner">

  <div class="wrapper">
    
    
    <a class="site-title" href="https://www.michael-noll.com/">Michael G. Noll</a>

    
      <nav class="site-nav">
        <input type="checkbox" id="nav-trigger" class="nav-trigger">
        <label for="nav-trigger">
          <span class="menu-icon">
            <svg viewBox="0 0 18 15" width="18px" height="15px">
              <path fill="#424242" d="M18,1.484c0,0.82-0.665,1.484-1.484,1.484H1.484C0.665,2.969,0,2.304,0,1.484l0,0C0,0.665,0.665,0,1.484,0 h15.031C17.335,0,18,0.665,18,1.484L18,1.484z"></path>
              <path fill="#424242" d="M18,7.516C18,8.335,17.335,9,16.516,9H1.484C0.665,9,0,8.335,0,7.516l0,0c0-0.82,0.665-1.484,1.484-1.484 h15.031C17.335,6.031,18,6.696,18,7.516L18,7.516z"></path>
              <path fill="#424242" d="M18,13.516C18,14.335,17.335,15,16.516,15H1.484C0.665,15,0,14.335,0,13.516l0,0 c0-0.82,0.665-1.484,1.484-1.484h15.031C17.335,12.031,18,12.696,18,13.516L18,13.516z"></path>
            </svg>
          </span>
        </label>

        <div class="trigger">
          <a class="page-link" href="https://www.michael-noll.com/">Home</a>
          <a class="page-link" href="https://www.michael-noll.com/about/">About</a>
          <a class="page-link" href="https://www.michael-noll.com/blog/archives/">Blog</a>
          <a class="page-link" href="https://www.michael-noll.com/publications/">Talks &amp; Publications</a>
          <a class="page-link" href="https://www.michael-noll.com/tutorials/">Tutorials</a>
          <a class="page-link" href="https://www.michael-noll.com/projects/">Projects</a>
        </div>
      </nav>
    
  </div>
</header>


    <main class="page-content" aria-label="Content">
      <div class="wrapper">
        <article class="post" itemscope="" itemtype="https://schema.org/BlogPosting">

  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Running a Multi-Broker Apache Kafka 0.8 Cluster on a Single Node</h1>
    <p class="post-meta">
      <time datetime="2013-03-13T18:59:00+01:00" itemprop="datePublished">
        
        Mar 13, 2013
      · <span>9 min read</span>
      </time>
      </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>In this article I describe how to install, configure and run a multi-broker Apache Kafka 0.8 (trunk) cluster on a
single machine.  The final setup consists of one local ZooKeeper instance and three local Kafka brokers.  We will
test-drive the setup by sending messages to the cluster via a console producer and receive those messages via a console
receiver.  I will also describe how to build Kafka for Scala 2.9.2, which makes it much easier to integrate Kafka with
other Scala-based frameworks and tools that require Scala 2.9 instead of Kafka’s default Scala 2.8.</p>

<!-- more -->

<ul id="markdown-toc">
  <li><a href="#what-we-want-to-do" id="markdown-toc-what-we-want-to-do">What we want to do</a></li>
  <li><a href="#installing-kafka" id="markdown-toc-installing-kafka">Installing Kafka</a>    <ul>
      <li><a href="#background-why-kafka-and-scala-29" id="markdown-toc-background-why-kafka-and-scala-29">Background: Why Kafka and Scala 2.9?</a></li>
      <li><a href="#option-1-preferred-kafka-08-trunk-with-scala-292" id="markdown-toc-option-1-preferred-kafka-08-trunk-with-scala-292">Option 1 (preferred): Kafka 0.8-trunk with Scala 2.9.2</a></li>
      <li><a href="#option-2-kafka-08-trunk-with-scala-280" id="markdown-toc-option-2-kafka-08-trunk-with-scala-280">Option 2: Kafka 0.8-trunk with Scala 2.8.0</a></li>
    </ul>
  </li>
  <li><a href="#configuring-and-running-kafka" id="markdown-toc-configuring-and-running-kafka">Configuring and running Kafka</a>    <ul>
      <li><a href="#configure-your-os" id="markdown-toc-configure-your-os">Configure your OS</a></li>
      <li><a href="#start-zookeeper" id="markdown-toc-start-zookeeper">Start ZooKeeper</a></li>
      <li><a href="#configure-and-start-the-kafka-brokers" id="markdown-toc-configure-and-start-the-kafka-brokers">Configure and start the Kafka brokers</a></li>
      <li><a href="#excursus-topics-partitions-and-replication-in-kafka" id="markdown-toc-excursus-topics-partitions-and-replication-in-kafka">Excursus: Topics, partitions and replication in Kafka</a></li>
      <li><a href="#create-a-kafka-topic" id="markdown-toc-create-a-kafka-topic">Create a Kafka topic</a></li>
      <li><a href="#start-a-producer" id="markdown-toc-start-a-producer">Start a producer</a></li>
      <li><a href="#start-a-consumer" id="markdown-toc-start-a-consumer">Start a consumer</a></li>
    </ul>
  </li>
  <li><a href="#a-note-when-using-kafka-with-storm" id="markdown-toc-a-note-when-using-kafka-with-storm">A note when using Kafka with Storm</a></li>
  <li><a href="#a-note-when-using-kafka-with-hadoop" id="markdown-toc-a-note-when-using-kafka-with-hadoop">A note when using Kafka with Hadoop</a></li>
  <li><a href="#where-to-go-from-here" id="markdown-toc-where-to-go-from-here">Where to go from here</a></li>
</ul>

<div class="pointer">
Update Mar 2014: I have released a <a href="https://github.com/miguno/wirbelsturm">Wirbelsturm</a>,
 a Vagrant and Puppet based tool to perform 1-click local and remote 
deployments, with a focus on big data related infrastructure such as 
Apache Kafka and Apache Storm.  Thanks to Wirbelsturm you don't need to 
follow this tutorial to manually install and configure a Kafka cluster. 
 Use Wirbelsturm to fire up a Kafka cluster, then come back to this 
tutorial and follow the usage examples.  You can find <a href="https://github.com/miguno/wirbelsturm">Wirbelsturm</a> on <a href="https://github.com/miguno/wirbelsturm">GitHub</a>.
</div>

<div class="pointer">
Update Feb 2014: I have released a <a href="http://puppetlabs.com/">Puppet</a> module to easily deploy Kafka clusters: <a href="https://github.com/miguno/puppet-kafka">puppet-kafka</a>.  This module automates most of the manual tasks listed in this article.  You can find <a href="https://github.com/miguno/puppet-kafka">puppet-kafka</a> on <a href="https://github.com/miguno/puppet-kafka">GitHub</a>.
</div>

<h1 id="what-we-want-to-do">What we want to do</h1>

<p>Here is an overview of what we want to do:</p>

<ul>
  <li>Build Kafka 0.8-trunk for Scala 2.9.2.
    <ul>
      <li>I also provide instructions for the default 2.8.0, just in case.</li>
    </ul>
  </li>
  <li>Use a single machine for this Kafka setup.</li>
  <li>Run 1 ZooKeeper instance on that machine.</li>
  <li>Run 3 Kafka brokers on that machine.</li>
  <li>Create a Kafka topic called “zerg.hydra” and send/receive messages for that topic via the console.  The topic
will be configured to use 3 partitions and 2 replicas per partition.</li>
</ul>

<p>The purpose of this article is not to present a production-ready configuration of a Kafka cluster.  However it should
get you started with using Kafka as a distributed messaging system in your own infrastructure.</p>

<h1 id="installing-kafka">Installing Kafka</h1>

<h2 id="background-why-kafka-and-scala-29">Background: Why Kafka and Scala 2.9?</h2>

<p>Personally I’d like to use Scala 2.9.2 for Kafka – which is still built for Scala 2.8.0 by default as of today –
because many related software packages that are of interest to me (such as Finagle, Kestrel) are based on Scala 2.9. 
Also, the current versions of many development and build tools (e.g. IDEs, sbt) for Scala require at least version 2.9. 
If you are working in a similar environment you may want build Kafka for Scala 2.9 just like I did – otherwise you can
expect to run into issues such as Scala version conflicts.</p>

<h2 id="option-1-preferred-kafka-08-trunk-with-scala-292">Option 1 (preferred): Kafka 0.8-trunk with Scala 2.9.2</h2>

<p>Unfortunately the current trunk of Kafka has problems to build against Scala 2.9.2 out of the box.  I created a
<a href="https://github.com/miguno/kafka/">fork of Kafka 0.8-trunk</a> that includes the
<a href="https://github.com/miguno/kafka/commit/9445d563e31967da5e4a62933a3407675be64693">required fix</a> (a change of one file)
in the <a href="https://github.com/miguno/kafka/tree/scala-2.9.2">branch “scala-2.9.2”</a>.  The fix ties the Scala version used by
Kafka’s shell scripts to 2.9.2 instead of 2.8.0.</p>

<p>The following instructions will use this fork to download, build and install Kafka for Scala 2.9.2:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd $HOME
$ git clone git@github.com:miguno/kafka.git
$ cd kafka
# this branch of includes a patched bin/kafka-run-class.sh for Scala 2.9.2
$ git checkout -b scala-2.9.2 remotes/origin/scala-2.9.2
$ ./sbt update
$ ./sbt "++2.9.2 package"
</code></pre></div></div>

<h2 id="option-2-kafka-08-trunk-with-scala-280">Option 2: Kafka 0.8-trunk with Scala 2.8.0</h2>

<p>If you are fine with Scala 2.8 you need to build and install Kafka as follows.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd $HOME
$ git clone git@github.com:apache/kafka.git
$ cd kafka
$ ./sbt update
$ ./sbt package
</code></pre></div></div>

<h1 id="configuring-and-running-kafka">Configuring and running Kafka</h1>

<p>Unless noted otherwise all commands below assume that you are in the top level directory of your Kafka installation.
If you followed the instructions above, this directory is <code class="highlighter-rouge">$HOME/kafka/</code>.</p>

<h2 id="configure-your-os">Configure your OS</h2>

<p>For Kafka 0.8 it is recommended to increase the maximum number of open file handles because due to changes in 0.8 Kafka
will keep more file handles open than in 0.7.  The exact number depends on your usage patterns, of course, but on the
Kafka mailing list the ballpark figure “tens of thousands” was shared:</p>

<blockquote><p>In Kafka 0.8, we keep the file handles for all segment 
files open until they are garbage collected.  Depending on the size of 
your cluster, this number can be pretty big. Few 10 K or so.</p><footer><strong>Neha Narkhede on kafka-users</strong> <cite><a href="http://grokbase.com/t/kafka/users/1337q7ecza/kafka-broker-problem">grokbase.com/t/kafka/users/…</a></cite></footer></blockquote>

<p>For instance, to increase the maximum number of open file handles for the user <code class="highlighter-rouge">kafka</code> to 98,304 (change <code class="highlighter-rouge">kafka</code> to
whatever user you are running the Kafka daemons with – this can be your own user account, of course) you must add the
following line to <code class="highlighter-rouge">/etc/security/limits.conf</code>:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kafka    -    nofile    98304
</code></pre></div></div>

<h2 id="start-zookeeper">Start ZooKeeper</h2>

<p>Kafka ships with a reasonable default ZooKeeper configuration for our simple use case.  The following command launches
a local ZooKeeper instance.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Start ZooKeeper</span>
<span class="nv">$ </span>bin/zookeeper-server-start.sh config/zookeeper.properties
</code></pre></div></div>

<p>By default the ZooKeeper server will listen on <code class="highlighter-rouge">*:2181/tcp</code>.</p>

<h2 id="configure-and-start-the-kafka-brokers">Configure and start the Kafka brokers</h2>

<p>We will create 3 Kafka brokers, whose configurations are based on the default <code class="highlighter-rouge">config/server.properties</code>.  Apart from
the settings below the configurations of the brokers are identical.</p>

<p>The first broker:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create the config file for broker 1</span>
<span class="nv">$ </span>cp config/server.properties config/server1.properties
</code></pre></div></div>

<p>Edit <code class="highlighter-rouge">config/server1.properties</code> and replace the existing config values as follows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>broker.id=1
port=9092
log.dir=/tmp/kafka-logs-1
</code></pre></div></div>

<p>The second broker:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create the config file for broker 2</span>
<span class="nv">$ </span>cp config/server.properties config/server2.properties
</code></pre></div></div>

<p>Edit <code class="highlighter-rouge">config/server2.properties</code> and replace the existing config values as follows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>broker.id=2
port=9093
log.dir=/tmp/kafka-logs-2
</code></pre></div></div>

<p>The third broker:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create the config file for broker 3</span>
<span class="nv">$ </span>cp config/server.properties config/server3.properties
</code></pre></div></div>

<p>Edit <code class="highlighter-rouge">config/server3.properties</code> and replace the existing config values as follows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>broker.id=3
port=9094
log.dir=/tmp/kafka-logs-3
</code></pre></div></div>

<p>Now you can start each Kafka broker <strong>in a separate console</strong>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Start the first broker in its own terminal session</span>
<span class="nv">$ </span>env <span class="nv">JMX_PORT</span><span class="o">=</span>9999  bin/kafka-server-start.sh config/server1.properties
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Start the second broker in its own terminal session</span>
<span class="nv">$ </span>env <span class="nv">JMX_PORT</span><span class="o">=</span>10000 bin/kafka-server-start.sh config/server2.properties
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Start the third broker in its own terminal session</span>
<span class="nv">$ </span>env <span class="nv">JMX_PORT</span><span class="o">=</span>10001 bin/kafka-server-start.sh config/server3.properties
</code></pre></div></div>

<p>Here is a summary of the configured network interfaces and ports that the brokers will listen on:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        Broker 1     Broker 2      Broker 3
----------------------------------------------
Kafka   *:9092/tcp   *:9093/tcp    *:9094/tcp
JMX     *:9999/tcp   *:10000/tcp   *:10001/tcp
</code></pre></div></div>

<h2 id="excursus-topics-partitions-and-replication-in-kafka">Excursus: Topics, partitions and replication in Kafka</h2>

<p>In a nutshell Kafka partitions incoming messages for a topic, and assigns those partitions to the available Kafka 
brokers.  The number of partitions is configurable and can be set per-topic and per-broker.</p>

<blockquote><p>First the stream [of messages] is partitioned on the 
brokers into a set of distinct partitions.  The semantic meaning of 
these partitions is left up to the producer and the producer specifies 
which partition a message belongs to.  Within a partition messages are 
stored in the order in which they arrive at the broker, and will be 
given out to consumers in that same order.</p><footer><strong>Kafka Design</strong> <cite><a href="http://kafka.apache.org/design.html">kafka.apache.org/design.html/…</a></cite></footer></blockquote>

<p>A new feature of Kafka 0.8 is that those partitions will be now be replicated across Kafka brokers to make the cluster
more resilient against host failures:</p>

<blockquote><p>Partitions are now replicated. Previously the topic would
 remain available in the case of server failure, but individual 
partitions within that topic could disappear when the server hosting 
them stopped.  If a broker failed permanently any unconsumed data it 
hosted would be lost.  Starting with 0.8 all partitions have a 
replication factor and we get the prior behavior as the special case 
where replication factor = 1. Replicas have a notion of committed 
messages and guarantee that committed messages won't be lost as long as 
at least one replica survives.  Replica are byte-for-byte identical 
across replicas.</p><p>Producer and consumer are replication aware. When running in <tt>sync</tt> mode, by default, the producer <tt>send()</tt>
 request blocks until the messages sent is committed to the active 
replicas. As a result the sender can depend on the guarantee that a 
message sent will not be lost.  Latency sensitive producers have the 
option to tune this to block only on the write to the leader broker or 
to run completely async if they are willing to forsake this guarantee. 
The consumer will only see messages that have been committed.</p><footer><strong>Kafka 0.8 Quickstart</strong> <cite><a href="https://cwiki.apache.org/KAFKA/kafka-08-quick-start.html">cwiki.apache.org/KAFKA/…</a></cite></footer></blockquote>

<p>The following diagram illustrates the relationship between topics, partitions and replicas.</p>

<p><img src="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/kafka-topics-partitions-replicas.png" title="The relationship between topics, partitions and replicas in Kafka."></p>

<div class="caption">The relationship between topics, partitions and replicas in Kafka.</div>

<p>Logically this relationship is very similar to how Hadoop manages blocks and replication in HDFS.</p>

<p>When a topic is created in Kafka 0.8, Kafka determines how each replica of a
partition is mapped to a broker.  In general Kafka tries to spread the replicas across all brokers
(<a href="http://grokbase.com/t/kafka/users/131vv7c7r9/are-topics-and-partitions-dynamic">source</a>).  Messages are first sent to
the first replica of a partition (i.e. to the current “leader” broker of that partition)  before they are replicated to
the remaining brokers.  Message producers may choose from different strategies for sending messages (e.g. synchronous
mode, asynchronous mode).  Producers discover the available brokers in a cluster and the number of partitions on each,
by <a href="http://kafka.apache.org/design.html">registering watchers in ZooKeeper</a>.</p>

<p>If you wonder how to configure the number of partitions per topic/broker, here’s feedback from LinkedIn developers:</p>

<blockquote><p>At LinkedIn, some of the high volume topics are 
configured with more than 1 partition per broker.  Having more 
partitions increases I/O parallelism for writes and also increases the 
degree of parallelism for consumers (since partition is the unit for 
distributing data to consumers).  On the other hand, more partitions 
adds some overhead: (a) there will be more files and thus more open file
 handlers; (b) there are more offsets to be checkpointed by consumers 
which can increase the load of ZooKeeper. So, you want to balance these 
tradeoffs.</p><footer><strong>[Kafka-users] Number of Partitions Per Broker</strong> <cite><a href="http://grokbase.com/t/kafka/users/131fk15cvr/number-of-partitions-per-broker">grokbase.com/t/kafka/users/…</a></cite></footer></blockquote>

<h2 id="create-a-kafka-topic">Create a Kafka topic</h2>

<p>In Kafka 0.8, there are 2 ways of creating a new topic:</p>

<ol>
  <li>Turn on <code class="highlighter-rouge">auto.create.topics.enable</code> option on the broker.  When the broker receives the first message for a
new topic, it creates that topic with <code class="highlighter-rouge">num.partitions</code> and <code class="highlighter-rouge">default.replication.factor</code>.</li>
  <li>Use the admin command <code class="highlighter-rouge">bin/kafka-topics.sh</code>.
    <ul>
      <li>Note: In Kafka 0.8.0 release use the admin command <code class="highlighter-rouge">bin/kafka-create-topic.sh</code>.  <code class="highlighter-rouge">kafka-topics.sh</code> was removed
in the release version and split into <code class="highlighter-rouge">kafka-create-topic.sh</code> and <code class="highlighter-rouge">kafka-list-topic.sh</code>.</li>
    </ul>
  </li>
</ol>

<p>We will use the latter approach.  The following command creates a new topic “zerg.hydra”.  The topic is configured to
use 3 partitions and a replication factor of 2.  Note that in a production setting we’d rather set the replication
factor to 3, but a value of 2 is better for illustrative purposes (i.e. we intentionally use different values for the
number of partitions and replications to better see the effects of each setting).</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create the "zerg.hydra" topic</span>
<span class="nv">$ </span>bin/kafka-topics.sh <span class="nt">--zookeeper</span> localhost:2181 <span class="se">\</span>
    <span class="nt">--create</span> <span class="nt">--topic</span> zerg.hydra <span class="nt">--partitions</span> 3 <span class="nt">--replication-factor</span> 2
</code></pre></div></div>

<div class="note">
Note: For Kafka 0.8.0 release you must use the command:
<tt>$ bin/kafka-create-topic.sh --zookeeper localhost:2181 --partition 3 --replica 2 --topic zerg.hydra</tt>
</div>

<p>This has the following effects:</p>

<ul>
  <li>Kafka will create 3 logical partitions for the topic.</li>
  <li>Kafka will create a total of two replicas (copies) per partition.  For each partition it will pick two brokers that
will host those replicas.  For each partition Kafka will elect a “leader” broker.</li>
</ul>

<p>Ask Kafka for a list of available topics.  The list should include the new <code class="highlighter-rouge">zerg.hydra</code> topic:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># List the available topics in the Kafka cluster</span>
<span class="nv">$ </span>bin/kafka-topics.sh <span class="nt">--zookeeper</span> localhost:2181 <span class="nt">--list</span>
...
zerg.hydra
</code></pre></div></div>

<div class="note">
Note: For Kafka 0.8.0 release you must use the command:
<tt>$ bin/kafka-list-topic.sh --zookeeper localhost:2181</tt>
</div>

<p>You can also inspect the configuration of the topic as well as the currently assigned brokers per partition and
replica.  Because a broker can only host a single replica per partition, Kafka has opted to use a broker’s ID also as
the corresponding replica’s ID.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># List the available topics in the Kafka cluster</span>
<span class="nv">$ </span>bin/kafka-topics.sh <span class="nt">--zookeeper</span> localhost:2181 <span class="nt">--describe</span> <span class="nt">--topic</span> zerg.hydra
...
zerg.hydra
    configs:
    partitions: 3
        partition 0
        leader: 1 <span class="o">(</span>192.168.0.153:9092<span class="o">)</span>
        replicas: 1 <span class="o">(</span>192.168.0.153:9092<span class="o">)</span>, 2 <span class="o">(</span>192.168.0.153:9093<span class="o">)</span>
        isr: 1 <span class="o">(</span>192.168.0.153:9092<span class="o">)</span>, 2 <span class="o">(</span>192.168.0.153:9093<span class="o">)</span>
        partition 1
        leader: 2 <span class="o">(</span>192.168.0.153:9093<span class="o">)</span>
        replicas: 2 <span class="o">(</span>192.168.0.153:9093<span class="o">)</span>, 3 <span class="o">(</span>192.168.0.153:9094<span class="o">)</span>
        isr: 2 <span class="o">(</span>192.168.0.153:9093<span class="o">)</span>, 3 <span class="o">(</span>192.168.0.153:9094<span class="o">)</span>
        partition 2
        leader: 3 <span class="o">(</span>192.168.0.153:9094<span class="o">)</span>
        replicas: 3 <span class="o">(</span>192.168.0.153:9094<span class="o">)</span>, 1 <span class="o">(</span>192.168.0.153:9092<span class="o">)</span>
        isr: 3 <span class="o">(</span>192.168.0.153:9094<span class="o">)</span>, 1 <span class="o">(</span>192.168.0.153:9092<span class="o">)</span>
</code></pre></div></div>

<div class="note">
Note: For Kafka 0.8.0 release you must use the command:
<tt>$ bin/kafka-list-topic.sh --zookeeper localhost:2181 --topic zerg.hydra</tt>
</div>

<p>In this example output the first broker (with <code class="highlighter-rouge">broker.id</code> = 1) happens to be the designated leader for partition 0
at the moment.  Similarly, the second and third brokers are the leaders for partitions 1 and 2, respectively.</p>

<p>The following diagram illustrates the setup (and also includes the producer and consumer that we will run shortly).</p>

<p><img src="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/kafka-cluster-overview.png" title="Overview of the Kafka setup that we will create in this article."></p>

<div class="caption">
Overview of our Kafka setup including the current state of the partitions and replicas.
The colored boxes represent replicas of partitions.  "P0 R1" denotes the replica with ID 1 for partition 0.
A bold box frame means that the corresponding broker is the leader for the given partition.
</div>

<p>You can also inspect the local filesystem to see how the <code class="highlighter-rouge">--describe</code> output above matches actual files.  By default
Kafka persists topics as “log files” (Kafka terminology) in the <code class="highlighter-rouge">log.dir</code> directory.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Local files that back up the partitions of Kafka topics</span>
<span class="nv">$ </span>tree /tmp/kafka-logs-<span class="o">{</span>1,2,3<span class="o">}</span>
/tmp/kafka-logs-1                   <span class="c"># first broker (broker.id = 1)</span>
├── zerg.hydra-0                    <span class="c"># replica of partition 0 of topic "zerg.hydra" (this broker is leader)</span>
│&nbsp;&nbsp; ├── 00000000000000000000.index
│&nbsp;&nbsp; └── 00000000000000000000.log
├── zerg.hydra-2                    <span class="c"># replica of partition 2 of topic "zerg.hydra"</span>
│&nbsp;&nbsp; ├── 00000000000000000000.index
│&nbsp;&nbsp; └── 00000000000000000000.log
└── replication-offset-checkpoint

/tmp/kafka-logs-2                   <span class="c"># second broker (broker.id = 2)</span>
├── zerg.hydra-0                    <span class="c"># replica of partition 0 of topic "zerg.hydra"</span>
│&nbsp;&nbsp; ├── 00000000000000000000.index
│&nbsp;&nbsp; └── 00000000000000000000.log
├── zerg.hydra-1                    <span class="c"># replica of partition 1 of topic "zerg.hydra" (this broker is leader)</span>
│&nbsp;&nbsp; ├── 00000000000000000000.index
│&nbsp;&nbsp; └── 00000000000000000000.log
└── replication-offset-checkpoint

/tmp/kafka-logs-3                   <span class="c"># third broker (broker.id = 3)</span>
├── zerg.hydra-1                    <span class="c"># replica of partition 1 of topic "zerg.hydra"</span>
│&nbsp;&nbsp; ├── 00000000000000000000.index
│&nbsp;&nbsp; └── 00000000000000000000.log
├── zerg.hydra-2                    <span class="c"># replica of partition 2 of topic "zerg.hydra" (this broker is leader)</span>
│&nbsp;&nbsp; ├── 00000000000000000000.index
│&nbsp;&nbsp; └── 00000000000000000000.log
└── replication-offset-checkpoint

6 directories, 15 files
</code></pre></div></div>

<h2 id="start-a-producer">Start a producer</h2>

<p>Start a console producer in <code class="highlighter-rouge">sync</code> mode:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Start a console producer in sync mode</span>
<span class="nv">$ </span>bin/kafka-console-producer.sh <span class="nt">--broker-list</span> localhost:9092,localhost:9093,localhost:9094 <span class="nt">--sync</span> <span class="se">\</span>
    <span class="nt">--topic</span> zerg.hydra
</code></pre></div></div>

<p>Example producer output:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[...] INFO Verifying properties (kafka.utils.VerifiableProperties)
[...] INFO Property broker.list is overridden to localhost:9092,localhost:9093,localhost:9094 (...)
[...] INFO Property compression.codec is overridden to 0 (kafka.utils.VerifiableProperties)
[...] INFO Property key.serializer.class is overridden to kafka.serializer.StringEncoder (...)
[...] INFO Property producer.type is overridden to sync (kafka.utils.VerifiableProperties)
[...] INFO Property queue.buffering.max.messages is overridden to 10000 (...)
[...] INFO Property queue.buffering.max.ms is overridden to 1000 (kafka.utils.VerifiableProperties)
[...] INFO Property queue.enqueue.timeout.ms is overridden to 0 (kafka.utils.VerifiableProperties)
[...] INFO Property request.required.acks is overridden to 0 (kafka.utils.VerifiableProperties)
[...] INFO Property request.timeout.ms is overridden to 1500 (kafka.utils.VerifiableProperties)
[...] INFO Property send.buffer.bytes is overridden to 102400 (kafka.utils.VerifiableProperties)
[...] INFO Property serializer.class is overridden to kafka.serializer.StringEncoder (...)
</code></pre></div></div>

<p>You can now enter new messages, one per line.  Here we enter two messages “Hello, world!” and
“Rock: Nerf Paper. Scissors is fine.”:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, world!
Rock: Nerf Paper. Scissors is fine.
</code></pre></div></div>

<p>After the messages are produced, you should see the data being replicated to the three log directories for each of the
broker instances, i.e. <code class="highlighter-rouge">/tmp/kafka-logs-{1,2,3}/zerg.hydra-*/</code>.</p>

<h2 id="start-a-consumer">Start a consumer</h2>

<p>Start a console consumer that reads messages in <code class="highlighter-rouge">zerg.hydra</code> <em>from the beginning</em> (in a production setting you
would usually NOT want to add the <code class="highlighter-rouge">--from-beginning</code> option):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Start a console consumer</span>
<span class="nv">$ </span>bin/kafka-console-consumer.sh <span class="nt">--zookeeper</span> localhost:2181 <span class="nt">--topic</span> zerg.hydra <span class="nt">--from-beginning</span>
</code></pre></div></div>

<p>The consumer will see a new message whenever you enter a message in the producer above.</p>

<p>Example consumer output:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;snipp&gt;
[...] INFO [console-consumer-28434_panama.local-1363174829799-954ed29e], Connecting to zookeeper instance at localhost:2181 ...
[...] INFO Starting ZkClient event thread. (org.I0Itec.zkclient.ZkEventThread)
[...] INFO Client environment:zookeeper.version=3.3.3-1203054, built on 11/17/2011 05:47 GMT ...
[...] INFO Client environment:host.name=192.168.0.153 (org.apache.zookeeper.ZooKeeper)
&lt;snipp&gt;
[...] INFO Fetching metadata with correlation id 0 for 1 topic(s) Set(zerg.hydra) (kafka.client.ClientUtils$)
[...] INFO Connected to 192.168.0.153:9092 for producing (kafka.producer.SyncProducer)
[...] INFO Disconnecting from 192.168.0.153:9092 (kafka.producer.SyncProducer)
[...] INFO [ConsumerFetcherThread-console-consumer-28434_panama.local-1363174829799-954ed29e-0-3], Starting ...
[...] INFO [ConsumerFetcherManager-1363174829916] adding fetcher on topic zerg.hydra, partion 2, initOffset -1 to broker 3 with fetcherId 0 ...
[...] INFO [ConsumerFetcherThread-console-consumer-28434_panama.local-1363174829799-954ed29e-0-2], Starting ...
[...] INFO [ConsumerFetcherManager-1363174829916] adding fetcher on topic zerg.hydra, partion 1, initOffset -1 to broker 2 with fetcherId 0 ...
[...] INFO [ConsumerFetcherThread-console-consumer-28434_panama.local-1363174829799-954ed29e-0-1], Starting ...
[...] INFO [ConsumerFetcherManager-1363174829916] adding fetcher on topic zerg.hydra, partion 0, initOffset -1 to broker 1 with fetcherId 0 ...
</code></pre></div></div>

<p>And at the end of the output you will see the following messages:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, world!
Rock: Nerf Paper. Scissors is fine.
</code></pre></div></div>

<p>That’s it!</p>

<h1 id="a-note-when-using-kafka-with-storm">A note when using Kafka with Storm</h1>

<p>The maximum parallelism you can have on a KafkaSpout is the number of partitions of the corresponding Kafka topic.  The
following question-answer thread (I slightly modified the original text for clarification purposes) is from the Storm
user mailing list, but supposedly refers to Kafka pre-0.8 and thereby before the replication feature was added:</p>

<blockquote><p><strong>Question</strong>: Suppose the number of Kafka 
partitions per broker is configured as 1 and the number of hosts is 2.  
If we set the spout parallelism as 10, then how does Storm handle the 
difference between the number of Kafka partitions and the number of 
spout tasks?  Since there are only 2 partitions, does every other spout 
task (greater than first 2) not read the data or do they read the same 
data?</p><p><strong>Answer (by Nathan Marz)</strong>: The remaining 8 (= 10 - 2) spout tasks wouldn't read any data from the Kafka topic.</p><footer><strong>Relationship between spout parallelism and number of Kafka partitions</strong> <cite><a href="https://groups.google.com/forum/?fromgroups=#!topic/storm-user/mBA1e6Y1MYY">groups.google.com/forum/…</a></cite></footer></blockquote>

<p>My current understanding is that the <em>number of partitions</em> (i.e. regardless of replicas) is still the limiting factor
for the parallelism of a KafkaSpout.  Why?  Because
<a href="https://cwiki.apache.org/KAFKA/kafka-replication.html">Kafka is not allowing consumers to read from replicas other than the (replica of the) leader of a partition</a>
to simplify concurrent access to data in Kafka.</p>

<h1 id="a-note-when-using-kafka-with-hadoop">A note when using Kafka with Hadoop</h1>

<p>LinkedIn has published their Kafka-&gt;HDFS pipeline named <a href="https://github.com/linkedin/camus">Camus</a>.  It is a MapReduce job
that does distributed data loads out of Kafka.</p>

<h1 id="where-to-go-from-here">Where to go from here</h1>

<p>Automated deployment of Kafka clusters:</p>

<ul>
  <li><a href="https://github.com/miguno/puppet-kafka">puppet-kafka</a> – a Puppet module I wrote to deploy Kafka 0.8+ clusters</li>
</ul>

<p>The following documents provide plenty of information about Kafka that goes way beyond what I covered in this article:</p>

<ul>
  <li><a href="http://kafka.apache.org/design.html">Kafka Design</a></li>
  <li><a href="http://kafka.apache.org/documentation.html#configuration">Kafka Configuration</a></li>
  <li><a href="http://kafka.apache.org/documentation.html#quickstart">Kafka 0.8 Quickstart</a></li>
  <li><a href="http://kafka.apache.org/documentation.html#operations">Kafka Operations</a> – how to run Kafka in production</li>
  <li><a href="http://kafka.apache.org/documentation.html#replication">Kafka Replication</a> including
<a href="https://cwiki.apache.org/confluence/display/KAFKA/kafka+Detailed+Replication+Design+V3">Detailed Replication Design v3 for Kafka 0.8</a></li>
  <li><a href="https://cwiki.apache.org/confluence/display/KAFKA/Writing+a+Driver+for+Kafka">Writing a Driver for Kafka</a> – includes information
about topics, partitions, Kafka’s “log” files and message objects</li>
</ul>


    <div id="social-sharing">

      <a class="share-button twitter" href="https://twitter.com/intent/tweet?url=https%3A%2F%2Fwww.michael-noll.com%2Fblog%2F2013%2F03%2F13%2Frunning-a-multi-broker-apache-kafka-cluster-on-a-single-node%2F&amp;text=Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node&amp;via=miguno" target="_blank">
           <svg class="twitter" fill="#000000" width="24" height="24" viewBox="0 0 24 24" xmlns="https://www.w3.org/2000/svg">
             <path d="M22.46,6C21.69,6.35 20.86,6.58 20,6.69C20.88,6.16 21.56,5.32 21.88,4.31C21.05,4.81 20.13,5.16 19.16,5.36C18.37,4.5 17.26,4 16,4C13.65,4 11.73,5.92 11.73,8.29C11.73,8.63 11.77,8.96 11.84,9.27C8.28,9.09 5.11,7.38 3,4.79C2.63,5.42 2.42,6.16 2.42,6.94C2.42,8.43 3.17,9.75 4.33,10.5C3.62,10.5 2.96,10.3 2.38,10C2.38,10 2.38,10 2.38,10.03C2.38,12.11 3.86,13.85 5.82,14.24C5.46,14.34 5.08,14.39 4.69,14.39C4.42,14.39 4.15,14.36 3.89,14.31C4.43,16 6,17.26 7.89,17.29C6.43,18.45 4.58,19.13 2.56,19.13C2.22,19.13 1.88,19.11 1.54,19.07C3.44,20.29 5.7,21 8.12,21C16,21 20.33,14.46 20.33,8.79C20.33,8.6 20.33,8.42 20.32,8.23C21.16,7.63 21.88,6.87 22.46,6Z"></path>
           </svg>
        Tweet this</a>

      <a class="share-button hacker-news" href="https://news.ycombinator.com/submitlink?u=https%3A%2F%2Fwww.michael-noll.com%2Fblog%2F2013%2F03%2F13%2Frunning-a-multi-broker-apache-kafka-cluster-on-a-single-node%2F&amp;t=Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node" target="_blank">
           <svg class="hacker-news" xmlns="https://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
             <path d="M18.8 3.3c-0.4 0.8-5.6 11.1-5.6 11.2 0 2 0 6.2 0 6.2 -0.1 0-2.2 0-2.3 0 0 0 0-5.9 0-6.2 0 0-5.5-10.9-5.6-11.1C5.3 3.3 5.3 3.3 5.3 3.3 5.3 3.3 5.3 3.3 5.3 3.3c0 0 0 0 0.1 0 0.9 0 1.7 0 2.6 0 0 0 0 0 0 0.1 0.1 0.1 4 8.3 4.1 8.3 0 0 4.2-8.3 4.3-8.4 0.8 0 1.6 0 2.4 0 0 0 0 0 0 0C18.8 3.3 18.8 3.3 18.8 3.3z"></path>
           </svg>
        Submit to Hacker News</a>

      <a class="share-button email" href="mailto:?subject=Running a Multi-Broker Apache Kafka 0.8 Cluster on a Single Node&amp;body=By Michael G. Noll: https%3A%2F%2Fwww.michael-noll.com%2Fblog%2F2013%2F03%2F13%2Frunning-a-multi-broker-apache-kafka-cluster-on-a-single-node%2F" target="_blank">
           <svg fill="#000000" width="24" height="24" viewBox="0 0 24 24" xmlns="https://www.w3.org/2000/svg">
             <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"></path><path d="M0 0h24v24H0z" fill="none"></path>
           </svg>
        Share via Email</a>
    </div>

    <div id="promo">
      Interested in more?  You can <a href="https://www.michael-noll.com/feed.xml">subscribe to this blog</a>
      and <a href="https://twitter.com/miguno">follow me on Twitter</a>.
    </div>
  </div>

  
    

  <div id="disqus_recommendations" style="margin-bottom: 12px;"><iframe id="dsq-app1902" name="dsq-app1902" allowtransparency="true" scrolling="no" tabindex="0" title="Disqus" style="width: 100% !important; border: medium none !important; overflow: hidden !important; height: 269px !important; display: inline !important; box-sizing: border-box !important;" src="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/a.htm" horizontalscrolling="no" verticalscrolling="no" width="100%" frameborder="0"></iframe></div><div id="disqus_thread"><iframe id="dsq-app6306" name="dsq-app6306" allowtransparency="true" scrolling="no" tabindex="0" title="Disqus" style="width: 1px !important; min-width: 100% !important; border: medium none !important; overflow: hidden !important; height: 5092px !important;" src="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/a_002.htm" horizontalscrolling="no" verticalscrolling="no" width="100%" frameborder="0"></iframe></div>
  <script>
    var disqus_config = function () {
      this.page.url = 'https://www.michael-noll.com/blog/2013/03/13/running-a-multi-broker-apache-kafka-cluster-on-a-single-node/';
      this.page.identifier = 'https://www.michael-noll.com/blog/2013/03/13/running-a-multi-broker-apache-kafka-cluster-on-a-single-node/';

			// Adds the onNewComment callback to the disqus_config of the embed code
			// that sends 'New Comment' events over to Google Analytics.
			// The callback can also be used for any other analytics service like Parse.ly, Chartbeat, Mixpanel
      // https://blog.disqus.com/how-to-track-disqus-activity-in-google-analytics
			this.callbacks.onNewComment = [function(comment) {
				ga('send', {
					'hitType': 'event',            // Required.
					'eventCategory': 'Comments',   // Required.
					'eventAction': 'New Comment',  // Required.
					'eventLabel': 'New Comment'
				});
			}];
    };

    (function() {
      var d = document, s = d.createElement('script');

      s.src = 'https://miguno.disqus.com/embed.js';

      s.setAttribute('data-timestamp', +new Date());
      (d.head || d.body).appendChild(s);
    })();
  </script>
  <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>


  
</article>

      </div>
    </main>

    <footer class="site-footer">

  <div class="wrapper">

    <h2 class="footer-heading">Michael G. Noll</h2>

    <div class="footer-col-wrapper">
      <div class="footer-col footer-col-1">
        <div>
          <a href="https://www.michael-noll.com/about/"><img src="Running%20a%20Multi-Broker%20Apache%20Kafka%200.8%20Cluster%20on%20a%20Single%20Node_files/miguno-portrait.png" style="float:left; padding: 0; margin: 0 1em 1em 0" width="80"></a>
          <p>
            Product manager. Computer scientist. Writer. Open source software committer.
            Currently focusing on product &amp; technology strategy and competitive analysis
            in the Office of the CTO at <a href="https://confluent.io/">Confluent</a>.
            <a href="https://www.michael-noll.com/about/">Read more »</a>
          </p>
        </div>
      </div>

      <div class="footer-col footer-col-2">
        <ul class="social-media-list">
          
          <li><a href="mailto:michael@michael-noll.com">michael@michael-noll.com</a></li>
          
          
          <li>
            <a href="https://twitter.com/miguno"><span class="icon icon--twitter"><svg viewBox="0 0 16 16" width="16px" height="16px"><path fill="#828282" d="M15.969,3.058c-0.586,0.26-1.217,0.436-1.878,0.515c0.675-0.405,1.194-1.045,1.438-1.809c-0.632,0.375-1.332,0.647-2.076,0.793c-0.596-0.636-1.446-1.033-2.387-1.033c-1.806,0-3.27,1.464-3.27,3.27 c0,0.256,0.029,0.506,0.085,0.745C5.163,5.404,2.753,4.102,1.14,2.124C0.859,2.607,0.698,3.168,0.698,3.767 c0,1.134,0.577,2.135,1.455,2.722C1.616,6.472,1.112,6.325,0.671,6.08c0,0.014,0,0.027,0,0.041c0,1.584,1.127,2.906,2.623,3.206 C3.02,9.402,2.731,9.442,2.433,9.442c-0.211,0-0.416-0.021-0.615-0.059c0.416,1.299,1.624,2.245,3.055,2.271 c-1.119,0.877-2.529,1.4-4.061,1.4c-0.264,0-0.524-0.015-0.78-0.046c1.447,0.928,3.166,1.469,5.013,1.469 c6.015,0,9.304-4.983,9.304-9.304c0-0.142-0.003-0.283-0.009-0.423C14.976,4.29,15.531,3.714,15.969,3.058z"></path></svg>
</span><span class="username">miguno</span></a>

          </li>
          

          
          <li>
            <a href="https://github.com/miguno"><span class="icon icon--github"><svg viewBox="0 0 16 16" width="16px" height="16px"><path fill="#828282" d="M7.999,0.431c-4.285,0-7.76,3.474-7.76,7.761 c0,3.428,2.223,6.337,5.307,7.363c0.388,0.071,0.53-0.168,0.53-0.374c0-0.184-0.007-0.672-0.01-1.32 c-2.159,0.469-2.614-1.04-2.614-1.04c-0.353-0.896-0.862-1.135-0.862-1.135c-0.705-0.481,0.053-0.472,0.053-0.472 c0.779,0.055,1.189,0.8,1.189,0.8c0.692,1.186,1.816,0.843,2.258,0.645c0.071-0.502,0.271-0.843,0.493-1.037 C4.86,11.425,3.049,10.76,3.049,7.786c0-0.847,0.302-1.54,0.799-2.082C3.768,5.507,3.501,4.718,3.924,3.65 c0,0,0.652-0.209,2.134,0.796C6.677,4.273,7.34,4.187,8,4.184c0.659,0.003,1.323,0.089,1.943,0.261 c1.482-1.004,2.132-0.796,2.132-0.796c0.423,1.068,0.157,1.857,0.077,2.054c0.497,0.542,0.798,1.235,0.798,2.082 c0,2.981-1.814,3.637-3.543,3.829c0.279,0.24,0.527,0.713,0.527,1.437c0,1.037-0.01,1.874-0.01,2.129 c0,0.208,0.14,0.449,0.534,0.373c3.081-1.028,5.302-3.935,5.302-7.362C15.76,3.906,12.285,0.431,7.999,0.431z"></path></svg>
</span><span class="username">miguno</span></a>

          </li>
          
        </ul>
      </div>

    </div>

    <div class="footer-copyright">
      © 2004-2021 Michael G. Noll. All rights reserved. Views expressed here are my own.
      <a href="https://www.michael-noll.com/privacy/">Privacy</a>.
    </div>

  </div>

</footer>


  


<iframe style="display: none;"></iframe><iframe style="display: none;"></iframe></body></html>